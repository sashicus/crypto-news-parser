import os
import requests
from bs4 import BeautifulSoup
from deep_translator import GoogleTranslator
from PIL import Image
from io import BytesIO
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è API-–∫–ª—é—á–∞ –∏ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
HUGGING_FACE_API_KEY = os.getenv("HUGGING_FACE_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not HUGGING_FACE_API_KEY or not BOT_TOKEN or not CHAT_ID:
    print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit()

# URLs
CRYPTO_NEWS_URL = "https://crypto.news/"

# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤–æ—Å—Ç—å
def get_latest_news():
    response = requests.get(CRYPTO_NEWS_URL, headers={"User-Agent": "Mozilla/5.0"}, timeout=10)
    response.raise_for_status()

    soup = BeautifulSoup(response.text, 'html.parser')
    news_list = soup.find(class_='home-latest-news__list')

    if not news_list:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ—Å—Ç–∏!")
        return None  

    news_element = news_list.find('a', class_='home-latest-news__item home-latest-news-item')
    return news_element['href'] if news_element else None

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏ –∫–∞—Ä—Ç–∏–Ω–∫—É (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
def get_news_content_and_image(link):
    response = requests.get(link, headers={"User-Agent": "Mozilla/5.0"}, timeout=10)
    response.raise_for_status()

    soup = BeautifulSoup(response.text, 'html.parser')
    content_element = soup.find(class_='post-detail__content blocks')

    if not content_element:
        print("‚ö†Ô∏è –ö–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return "", None

    for unwanted in content_element.find_all(class_=['cn-block-related-link', 'token-badge-container']):
        unwanted.decompose()

    content = content_element.get_text(separator=' ', strip=True)

    # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    img_url = get_image_url(soup)

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    title_tag = soup.find('h1')
    title = title_tag.get_text(strip=True) if title_tag else "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"

    return content, img_url, title

# –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def get_image_url(soup):
    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ <img>
    img_tag = soup.find('img', class_='post-detail__image wp-post-image')
    if img_tag:
        return img_tag['src']
    
    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ <picture>
    picture_tag = soup.find('picture', class_='post-detail__image wp-post-image')
    if picture_tag:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –µ—Å—Ç—å source —Å —Ñ–æ—Ä–º–∞—Ç–æ–º .webp
        source_tag = picture_tag.find('source', type='image/webp')
        if source_tag:
            return source_tag['srcset']
        
        # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –±–µ—Ä–µ–º <img> –∏–∑ —Ç–µ–≥–∞ <picture>
        img_tag = picture_tag.find('img')
        if img_tag:
            return img_tag['src']
    
    # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
    return None

# –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø–æ–º–æ—â—å—é Google Translate
def translate_title(title):
    return GoogleTranslator(source="auto", target="ru").translate(title)

# –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ –ò–ò –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π (–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞)
def analyze_text(text):
    prompt = f"Please summarize the following news article in a clear and concise manner, highlighting the main points and keeping the context intact: {text}"
    payload = {"inputs": prompt, "parameters": {"max_length": 1000, "temperature": 0.5}}
    response = requests.post("https://api-inference.huggingface.co/models/facebook/bart-large-cnn", headers={"Authorization": f"Bearer {HUGGING_FACE_API_KEY}"}, json=payload)

    if response.status_code == 200 and response.json():
        summary = response.json()[0].get("summary_text", "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞")
    else:
        summary = "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞"

    return GoogleTranslator(source="en", target="ru").translate(summary)

# –û–±—Ä–µ–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def crop_image(img_url):
    img_response = requests.get(img_url)
    img = Image.open(BytesIO(img_response.content))

    # –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–Ω–∏–∑—É –Ω–∞ 100 –ø–∏–∫—Å–µ–ª–µ–π
    width, height = img.size
    img_cropped = img.crop((0, 0, width, height - 100))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
    img_io = BytesIO()
    img_cropped.save(img_io, format="JPEG")
    img_io.seek(0)
    
    return img_io

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ—Å—Ç–∞ –≤ Telegram (—Å –∂–∏—Ä–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, –±–µ–∑ —ç–º–æ–¥–∑–∏ –≤ —Ç–µ–∫—Å—Ç–µ)
def send_telegram_post(translated_title, summary, img_url, news_link):
    message = f"*{translated_title}*\n\n{summary}\n\nüîó –ò—Å—Ç–æ—á–Ω–∏–∫: {news_link}"  # –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å —Ç–µ–∫—Å—Ç–æ–º –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    if img_url:
        img_io = crop_image(img_url)
        send_photo_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendPhoto"

        response = requests.post(send_photo_url, data={
            'chat_id': CHAT_ID,
            'caption': message,
            'parse_mode': 'Markdown'
        }, files={'photo': ('cropped.jpg', img_io, 'image/jpeg')})

        if response.status_code == 200:
            print("‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–∞: {response.text}")
    else:
        send_message_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        response = requests.post(send_message_url, data={
            "chat_id": CHAT_ID,
            "text": message,
            "parse_mode": "Markdown"
        })

        if response.status_code == 200:
            print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")


# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
news_link = get_latest_news()

if news_link:
    news_content, img_url, title = get_news_content_and_image(news_link)
    translated_title = translate_title(title)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    summary = analyze_text(news_content)  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏

    print(f"üåç –ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å:\nüîó {news_link}")
    print(f"üì¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {translated_title}")
    print(f"üìú –ê–Ω–∞–ª–∏–∑: {summary}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    send_telegram_post(translated_title, summary, img_url, news_link)
else:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å.")
